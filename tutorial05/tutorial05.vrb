\frametitle{Aufgabe 5.3 - Stapelschlange}

	\begin{columns}

		\begin{column}{0.48\textwidth}
			\begin{minted}[fontsize=\scriptsize]{java}
class Stapelschlange {
  private Stack s1 = new Stack();
  private Stack s2 = new Stack();

  public void enqueue(int v) {
  	s1.push(v);
  }

  public int dequeue() {
    if(s2.isEmpty())
      while (!s1.isEmpty())
        s2.push(s1.pop());
    return s2.pop();
  }
}
			\end{minted}

			{\scriptsize
			\begin{table}
				\begin{tabular}{|l|l|}
					\hline
					Stack-Methode     & Laufzeit         \\ \hline
					void push(int v)  & $\mathcal{O}(1)$ \\ \hline
					int pop()         & $\mathcal{O}(1)$ \\ \hline
					boolean isEmpty() & $\mathcal{O}(1)$ \\ \hline
				\end{tabular}
			\end{table}
			}
		\end{column}

		\begin{column}{0.48\textwidth}
			\renewcommand{\theenumi}{\alph{enumi}}
			\begin{enumerate}
				\item Was ist die Worst-Case Laufzeit von \mintinline{java}{dequeue} (abhängig von Queuegröße $n$)?
				\item Finden Sie ein Amortisierungsschema, das die amortisierte Laufzeit der Operationen minimiert. \\
				      Geben Sie die Laufzeiten an und zeigen Sie die Korrektheit des Schemas?
			\end{enumerate}
		\end{column}
	\end{columns}
